Question 1: By default are Django signals executed synchronously or asynchronously? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

Answer: 

Django signals Executed both synchronously the default and asynchronously depending on implement.

1. Synchronously(Default)

By default, Django signals are executed synchronously, meaning this receiver function is called immediately when the signal is sent.

2. asynchronously(delay time)

To execute signal handlers asynchronously, I use some tools async and await. Django provide built-in async features.
This method is very helpful because If some functionality take more time, then use asynchronously (async/await). 
Celery same work. But  Celery complete background tasks using asynchronously. 

Question 2: Do Django signals run in the same thread as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

Answer:

yes, Django signals run in the same thread as the caller by default. When a signal is sent, the connected receiver handlers are executed synchronously in the same thread.

If you want to run signal handlers in different thread using asynchronously. such as using celery and python built-in threading or asyncio 
libraries.

Question 3: By default do Django signals run in the same database transaction as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

Answer:

yes, Django signal run in the same database transaction as the caller by default. Signals like post_save and pre_save are executed part of the transaction that view and model operation initiates. The caller transaction is rolled Back. The signal handlers will also be rolled back.

Rolled back transaction example:
 
   When user wrong person detail add and send payment, user show issues payment successfully restore in user account. This functionality using by transaction(rolled back).


My project links(Only learning purpose):

1. E-commerce website:

   https://github.com/jatinkoladiya13/project5

2. School management system(only web app)
    
   Celery and Mongodb.
   
   https://github.com/jatinkoladiya13/project7
  
3. chatapp (only learning purpose)
   
   channels(web socket) 
    
   https://github.com/jatinkoladiya13/chatapp
 
